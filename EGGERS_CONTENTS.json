{"home":{"content":"# CSS Layouts\n---\n\nWelcome to Lecture 3! Here's a brief class breakdown.\n\n#### Learning objectives\n---\n\n1. Define the box model, understand how it works\n2. Learn the difference between display types\n3. Be able to create multiple forms of layout using HTML and CSS\n\n\n#### To Do Today\n---\n\n* #### [Warmup](#warmup)\n* #### [The Box Model](#the-box-model)\n* #### [Floats](#floats)\n* #### [Practice](#practice)\n* #### [Reset.css](https://canvas.instructure.com/courses/1105667/files/47398839?module_item_id=11295552) (from Canvas Notes)\n\n#### BONUS: [Flexbox](#flexbox)\n<p></p>\n<p></p>\n\n#### Additional Resources\n---\n\n* #### [CSS Layouts](https://canvas.instructure.com/courses/1105667/files/47398833?module_item_id=11295551)\n* #### [CSS Resets](https://canvas.instructure.com/courses/1105667/files/47398839?module_item_id=11295552)\n\n","idx":0},"title":{"content":"CSS Layouts","idx":1},"desc":{"content":"Building layouts with CSS","idx":2},"warmup":{"content":"# Warmup\n---\n\nLet's begin with a quick review of what we did last Tuesday.\n\n#### Task 1: Selector Review\n---\n\nGrab the following repo:\n#### [CSS Selector Problems](https://github.com/FEWDMaterials/CSSSelectorsReview)\n\n(You can download that repo by clicking on the  big green button on the right hand side and hitting **Download Zip**)\n\nThen,\n2. Unzip your downloaded folder, you should find 4 folders. \n3. Follow instructions in each **README** file (and the **instructions.html** file - you should open this one in browser) to complete.\n4. End result should look like the attached image in each **instructions.html** file (except for the **tagSelectors** folder which doesn't have an image).\n\n#### Task 2: Optional Relative/Absolute URL review\n---\n**[Consider this repo](https://github.com/FEWDMaterials/RelativePathsReview)**.\n\n(You can download that repo by clicking on the  big green button on the right hand side and hitting **Download Zip**)\n\nYou are given several \"websites\". However they are set up in strange configurations! \n\n**For Each Folder**\n\n1. **WITHOUT** rearranging the files, link the proper css folders in the **`HEAD`** section\n2. If you do it right, hovering over the page in the browser will cause it to change colors\n\n**QUESTION**: how else can you verify that the files are linking properly...?\n\n**FOLLOW UP**: also push these pages up to your github via **[GitBot](http://www.gitbot.co)**.\n\n","idx":3},"the-box-model":{"content":"# The Box Model\n---\n\nThe Box Model is a way of thinking about CSS DOM elements on the page. Instead of thinking of HTML elements as bits of HTML wrappers we style, we can think of them as boxes with specific dimensions and properties. Given this though, an HTML layout can be thought of as boxes within boxes.\n\n#### Margin, Padding, Border\n---\n\n<img src=\"http://blog.teamtreehouse.com/wp-content/uploads/2014/05/chrome-computed.png\" style=\"width: 100%;\">\n\n**Margin**: space in **between** DOM elements\n\n**Padding**: space **within** the DOM element\n\n**Border**: the outline **around** the DOM Element.\n\nIn general, the width of a DOM element is **padding** + **border** + **content**.\n\n#### Implications\n---\nThe main implications of this has to do with building **rows** with multiple tags / items inside of it. \n\nThe widths adding up to 100% isn't enough -- the **width** + **padding** + **border** + **margin** must add up to 100%!\n\n#### Box Sizing\n---\n\nThis is a useful tool. We can use box-sizing to force the padding to be **pulled into** our content width. This way, padding is **not** added to the overall width.\n\n**Types**: content-box, border-box\n\n#### Exercises: Layout Review\n---\n\nGrab the following repo:\n#### [Basic Layout Problems](https://github.com/FEWDMaterials/basicLayoutsReview)\n\n(You can download that repo by clicking on the  big green button on the right hand side and hitting **Download Zip**)\n\nThen,\n2. Unzip your downloaded folder, you should find 4 folders. \n3. Follow instructions in each **README** file (and the **index.html** file - you should open this one in browser) to complete.\n4. End result should look like the attached image in each **index.html** file.\n\n","idx":4},"floats":{"content":"# Floats\n---\n\nDisplay methods, while effective, don't go very far in helping us make effective layouts. Floats are a concept (though kind of convoluted) which help us build complex layouts and grids with more ease.\n\n#### Exercises: Float Review\n---\n\nGrab the following repo:\n#### [Float Layout Problems](https://github.com/FEWDMaterials/floatedLayoutsReview)\n\n(You can download that repo by clicking on the  big green button on the right hand side and hitting **Download Zip**)\n\nThen,\n2. Unzip your downloaded folder, you should find 4 folders. \n3. Follow instructions in each **README** file (and the **index.html** file - you should open this one in browser) to complete.\n<p></p>\n<p></p>\n\n\n#### Examples\n---\nWe will use these examples to understand the concept at hand.\n\n#### [Simple Three Column Layout](http://fewd.us/howdoi/#/problem/4258)\n#### [Clearfixing the Parent](http://fewd.us/howdoi/#/problem/4702)\n#### [Practical Example](http://fewd.us/howdoi/#/problem/4927)\n\n<p></p>\n<p></p>\n\n#### Important Facts\n---\n\n1. How do they work??\n2. A left-floated box will shift to the left until its leftmost margin edge (or border edge if margins are absent) touches either the edge of the containing block, or the edge of another floated box\n3. If the size of the floated box exceeds the available horizontal space, the floated box will be shifted down\n4. Non-positioned, non-floated, block-level elements act as if the floated element is not there, since the floated element is out of flow in relation to other block elements\n5. The root element (<html>) cannot be floated\n5. An inline element that is floated is converted to a block-level element\n\n\n#### Clears\n---\n\n1. This is the anti-float\n2. clearing an item (can be a floated or non floated item) will undo the effects of the float\n3. if we're smart about how we arrange our tag structures, we don't really need to rely on this too much\n\n#### The Collapsing Parent\n---\n\n1. float the parent (meh)\n2. empty div in markup with clear: both (meh)\n3. overflow: hidden or auto (better)\n4. clearfix (best)\n\n","idx":5},"practice":{"content":"# Practice\n---\n\nWhat follows are some practical examples that will help you get a feel for how layouts should be built for **real** websites.\n\n#### Tasks\n---\n\nFor each of the following screenshots, do **not** worry about matching the styles. **DO** worry about getting the layout broken up and set correctly.\n\nEffectively, I'd like to see boxes representing each anchor or h1, maybe with a border, for each of the following problems.\n\n1. Create a **new** folder for each of the following problems.\n2. Your folder should have an **index.html** file and an appropriately created and linked **main.css**\n3. Use any and all CSS layout techniques you know (that we have covered so far) to achieve these layouts.\n4. **AGAIN**: do not worry about the stylistic elements, the font-families and font-sizes and colors are not important here. \n\n#### NYTimes Science Page\n---\n<img src=\"https://github.com/mottaquikarim/nycda_day_3/blob/master/p1.png?raw=true\" style=\"width: 100%; height: auto;\">\n\n#### Facebook Menu\n---\n<img src=\"https://github.com/mottaquikarim/nycda_day_3/blob/master/p2.png?raw=true\" style=\"width: 100%; height: auto;\">\n\n#### Facebook Page\n---\n<img src=\"https://github.com/mottaquikarim/nycda_day_3/blob/master/p3.png?raw=true\" style=\"width: 100%; height: auto;\">\n\n\n#### Instagram Profile Page\n---\n<img src=\"https://github.com/mottaquikarim/nycda_day_3/blob/master/p4.png?raw=true\" style=\"width: 100%; height: auto;\">\n\n\n#### [Optional](https://github.com/FEWDMaterials/layoutPractice)\nDo **not** download this repository (the answers are all there!). Just look at the screenshots and try to replicate.\n","idx":6},"flexbox":{"content":"# FlexBox\n---\n\nFlexbox is the newest standard which aims to help make it easier to build modern web interfaces with CSS. It's a spec that gives us ways to [\"lay out, align and distribute space among items in a container\"](https://css-tricks.com/snippets/css/a-guide-to-flexbox/).\n\n#### Flex container\n---\n\nThis is the parent of the items you want to flex.\n\n#### Some properties\n---\n\n1. display\n2. flex-direction\n3. flex-wrap\n4. justify-content\n5. align-items\n6. align-content\n\n#### Flex items\n---\n\nThese are the properties for the children\n\n#### Some properties\n---\n\n1. order\n2. flex-grow\n3. flex-shrink\n4. align-self\n\nAlso, clear, float and vertical align have no effect on flex'd items.\n\n[More info here](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)\n\n#### Practice\n---\n\n1. [http://fewd.us/jargon/#/problem/10097](http://fewd.us/jargon/#/problem/10097)\n2. [http://fewd.us/jargon/#/problem/10098](http://fewd.us/jargon/#/problem/10098)\n3. [http://fewd.us/jargon/#/problem/10099](http://fewd.us/jargon/#/problem/10099)\n4. [http://fewd.us/jargon/#/problem/10100](http://fewd.us/jargon/#/problem/10100)","idx":7},"__list__":["home","title","desc","warmup","the-box-model","floats","practice","flexbox"]}